// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dnpb_routes.proto

package dnpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HealthCheckResponse_NodeStatus int32

const (
	HealthCheckResponse_HEALTHY   HealthCheckResponse_NodeStatus = 0
	HealthCheckResponse_UNHEALTHY HealthCheckResponse_NodeStatus = 1
)

var HealthCheckResponse_NodeStatus_name = map[int32]string{
	0: "HEALTHY",
	1: "UNHEALTHY",
}

var HealthCheckResponse_NodeStatus_value = map[string]int32{
	"HEALTHY":   0,
	"UNHEALTHY": 1,
}

func (x HealthCheckResponse_NodeStatus) String() string {
	return proto.EnumName(HealthCheckResponse_NodeStatus_name, int32(x))
}

func (HealthCheckResponse_NodeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_08edf9c909488729, []int{1, 0}
}

type HealthCheckRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckRequest) Reset()         { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()    {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_08edf9c909488729, []int{0}
}

func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckRequest.Unmarshal(m, b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return xxx_messageInfo_HealthCheckRequest.Size(m)
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

type HealthCheckResponse struct {
	Status               HealthCheckResponse_NodeStatus `protobuf:"varint,1,opt,name=Status,json=status,proto3,enum=dnpb.HealthCheckResponse_NodeStatus" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_08edf9c909488729, []int{1}
}

func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckResponse.Unmarshal(m, b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return xxx_messageInfo_HealthCheckResponse.Size(m)
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetStatus() HealthCheckResponse_NodeStatus {
	if m != nil {
		return m.Status
	}
	return HealthCheckResponse_HEALTHY
}

func init() {
	proto.RegisterEnum("dnpb.HealthCheckResponse_NodeStatus", HealthCheckResponse_NodeStatus_name, HealthCheckResponse_NodeStatus_value)
	proto.RegisterType((*HealthCheckRequest)(nil), "dnpb.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "dnpb.HealthCheckResponse")
}

func init() {
	proto.RegisterFile("dnpb_routes.proto", fileDescriptor_08edf9c909488729)
}

var fileDescriptor_08edf9c909488729 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xc9, 0x2b, 0x48,
	0x8a, 0x2f, 0xca, 0x2f, 0x2d, 0x49, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01,
	0x09, 0x29, 0x89, 0x70, 0x09, 0x79, 0xa4, 0x26, 0xe6, 0x94, 0x64, 0x38, 0x67, 0xa4, 0x26, 0x67,
	0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0xd5, 0x72, 0x09, 0xa3, 0x88, 0x16, 0x17, 0xe4,
	0xe7, 0x15, 0xa7, 0x0a, 0xd9, 0x70, 0xb1, 0x05, 0x97, 0x24, 0x96, 0x94, 0x16, 0x4b, 0x30, 0x2a,
	0x30, 0x6a, 0xf0, 0x19, 0xa9, 0xe8, 0x81, 0xcc, 0xd0, 0xc3, 0xa2, 0x54, 0xcf, 0x2f, 0x3f, 0x25,
	0x15, 0xa2, 0x36, 0x88, 0xad, 0x18, 0x4c, 0x2b, 0x69, 0x70, 0x71, 0x21, 0x44, 0x85, 0xb8, 0xb9,
	0xd8, 0x3d, 0x5c, 0x1d, 0x7d, 0x42, 0x3c, 0x22, 0x05, 0x18, 0x84, 0x78, 0xb9, 0x38, 0x43, 0xfd,
	0x60, 0x5c, 0x46, 0xa3, 0x18, 0x2e, 0x31, 0x97, 0xc4, 0x92, 0x44, 0x90, 0x6a, 0xcf, 0xbc, 0x92,
	0xd4, 0xa2, 0xbc, 0xc4, 0x9c, 0x20, 0xb0, 0xd3, 0x85, 0x9c, 0xb8, 0xb8, 0x91, 0x6c, 0x13, 0x92,
	0xc0, 0xe2, 0x00, 0xb0, 0x0f, 0xa4, 0x24, 0x71, 0x3a, 0x2d, 0x89, 0x0d, 0xec, 0x7f, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0x61, 0x46, 0x84, 0x14, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataNodeInternalRoutesClient is the client API for DataNodeInternalRoutes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataNodeInternalRoutesClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type dataNodeInternalRoutesClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeInternalRoutesClient(cc grpc.ClientConnInterface) DataNodeInternalRoutesClient {
	return &dataNodeInternalRoutesClient{cc}
}

func (c *dataNodeInternalRoutesClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/dnpb.DataNodeInternalRoutes/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeInternalRoutesServer is the server API for DataNodeInternalRoutes service.
type DataNodeInternalRoutesServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

// UnimplementedDataNodeInternalRoutesServer can be embedded to have forward compatible implementations.
type UnimplementedDataNodeInternalRoutesServer struct {
}

func (*UnimplementedDataNodeInternalRoutesServer) HealthCheck(ctx context.Context, req *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}

func RegisterDataNodeInternalRoutesServer(s *grpc.Server, srv DataNodeInternalRoutesServer) {
	s.RegisterService(&_DataNodeInternalRoutes_serviceDesc, srv)
}

func _DataNodeInternalRoutes_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeInternalRoutesServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnpb.DataNodeInternalRoutes/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeInternalRoutesServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataNodeInternalRoutes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dnpb.DataNodeInternalRoutes",
	HandlerType: (*DataNodeInternalRoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _DataNodeInternalRoutes_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dnpb_routes.proto",
}
